reset;
suffix xfeastol IN;
suffix cfeastol IN;
suffix feaserror IN,>=0, <=1e6;
suffix opterror IN,>=0, <=1e6;
suffix numfcevals IN, >=0, <=1e6;
suffix intvarstrategy IN;

param CONST_POINT symbolic := "CONST_POINT";
param GOC_POINT symbolic := "GOC_POINT";
param DO_NOTHING symbolic := "DO_NOTHING";
param MPEC symbolic := "MPEC";

param OPTIMIZATION_CHOICE symbolic := MPEC;

param STRATEGY_INITPOINT symbolic := CONST_POINT;
/* param STRATEGY_INITPOINT symbolic := GOC_POINT; */

param TIME_BEGIN;
let TIME_BEGIN := time();

/* display _SUFFIXES; */

model real_minlp.mod;

data;

param: KEYS: LEFT RIGHT  := include "real_minlp_instance.dat";
set PRECOND_CONSTRAINTS := include "real_minlp_precond_cstrs.dat";


model;


option solver knitroampl;
option knitro_options 'outlev=3 maxit=600 scale=0 feastol=1 opttol=1 feastolabs=1e-6 opttolabs=1e-3 bar_initpt=2 presolve=0 honorbnds=0';


###
# initialization
###

if STRATEGY_INITPOINT == GOC_POINT then{
	let{(VAR_TYPE, REAL, name, NONE) in KEYS} x[name] := LEFT[VAR_TYPE, REAL, name, NONE]*1.0;
	let{(VAR_TYPE, BOOL, name, NONE) in KEYS} y[name] := LEFT[VAR_TYPE, BOOL, name, NONE]*1.0;
} else if STRATEGY_INITPOINT == CONST_POINT then{
	let{(VAR_TYPE, REAL, name, NONE) in KEYS} x[name] := 1.1;
	let{(VAR_TYPE, BOOL, name, NONE) in KEYS} y[name] := 0.0;
};

option presolve 0;
if STRATEGY_INITPOINT == GOC_POINT and card({i in 1.._ncons: _con[i].slack<-1e-5})>1 then{
	printf "---\nListing the constraints violated by initial point\n---\n";
	printf "%-120s%15s%15s%15s%15s\n", "NAME", "LB", "BODY", "UB", "SLACK";
	printf{i in 1.._ncons: _con[i].slack<-1e-5}"%-120s%15.6E%15.6E%15.6E%15.6E\n",
		_conname[i],
		_con[i].lb,
		_con[i].body,
		_con[i].ub,
		_con[i].slack;
	printf "---\n";
}
option presolve 0;

#define KTR_PARAM_MIP_INTVAR_STRATEGY 2030
# define KTR_MIP_INTVAR_STRATEGY_NONE 0
# define KTR_MIP_INTVAR_STRATEGY_RELAX 1
# define KTR_MIP_INTVAR_STRATEGY_MPEC 2
if OPTIMIZATION_CHOICE == MPEC then {
	# first phase relaxation binary constraints
	let{varname in BINARY_VARIABLES} y[varname].intvarstrategy := 1;


	write gphase1;
	solve;

	close knitro_info.csv;
	printf "%s;%f\n", "Time first resolution", time()-TIME_BEGIN > knitro_info.csv;
	close knitro_info.csv;

	if card({i in 1.._ncons: _con[i].slack<-1e-6})>1 then{
		printf "---\nListing the constraints violated by initial point\n---\n";
		printf "%60s%15s%15s%15s%15s\n", "NAME", "LB", "BODY", "UB", "SLACK";
		printf{i in 1.._ncons: _con[i].slack<-1e-6}"%60s%15.6E%15.6E%15.6E%15.6E\n",
			_conname[i],
			_con[i].lb,
			_con[i].body,
			_con[i].ub,
			_con[i].slack;
		printf "---\n";
	}
	option presolve 0;

	option knitro_options 'outlev=3 maxit=600 scale=0 feastol=1 opttol=1 feastolabs=1e-6 opttolabs=1e-3 bar_initpt=2 presolve=0 honorbnds=0';

	printf"Binary variables max dist to 1, phase 1\n";
	display max{varname in BINARY_VARIABLES}min(
		y[varname],
		1-y[varname]
		);

	display card(BINARY_VARIABLES);
	display BINARY_VARIABLES;
	display y;

	# second phase reformulating binary constraints into MPEC and starting from the previous KKT solution
	let{varname in BINARY_VARIABLES} y[varname].intvarstrategy := 2;

	write gphase2;
	solve;


	printf "%s;%f\n", "Time second resolution", time()-TIME_BEGIN >> knitro_info.csv;
	close knitro_info.csv;

	display time()-TIME_BEGIN;

	option solution_precision 0;
	option display_precision 0;

	printf"Binary variables max dist to 1, phase 2\n";
	display max{varname in BINARY_VARIABLES}min(
		y[varname],
		1-y[varname]
		);

	display card(BINARY_VARIABLES);
	display BINARY_VARIABLES;
	display y;

};

printf"%-40s;%s;%s\n", "#Var name", "Knitro sol", "GOC sol" > ("solution_"&STRATEGY_INITPOINT&".csv");
printf{var0 in REAL_VARIABLES} "%s;%.20e;%.20e\n", var0, x[var0], LEFT[VAR_TYPE, REAL, var0, NONE] > ("solution_"&STRATEGY_INITPOINT&".csv");
printf{var0 in BINARY_VARIABLES} "%s;%.20e;%.20e\n", var0, y[var0], LEFT[VAR_TYPE, BOOL, var0, NONE] > ("solution_"&STRATEGY_INITPOINT&".csv");


printf"||x-x_GOC||_2   : %f\n", sqrt(sum{var0 in REAL_VARIABLES} (x[var0] - LEFT[VAR_TYPE, REAL, var0, NONE])^2);
printf"||x-x_GOC||_inf : %f\n\n", max{var0 in REAL_VARIABLES} abs(x[var0] - LEFT[VAR_TYPE, REAL, var0, NONE]);
